#include <iostream>
#include <string>
#include <forward_list>
#include <iomanip>
using namespace std;

class bus
{
public:
	string num;
	string surname;
	string inicial;
	int marsh;
};

void variant() 
{
	cout << "1. вывод всех автобусов" << endl;
	cout << "2. добавление автобуса в начало списка" << endl;
	cout << "3. добавление автобуса перед определенным автобусом" << endl;
	cout << "4. сведения об автобусах" << endl;
	cout << "5. удалить данные автобуса и добавляет в маршурыты" << endl;
	cout << "6. удаляет из маршрута и добавляет в парк" << endl;
	cout << "0 - выход" << endl;
}
void input (bus& avto) 
{
	cout << "введите номер автобуса: " << endl;
	cin >> avto.num;
	cout << "введите фамили водителя: " << endl;
	cin >> avto.surname;
	cout << "введите инициалы водителя: " << endl;
	cin >> avto.inicial;
	cout << "введите маршрут автобуса: " << endl;
	cin >> avto.marsh;
}
void press3(forward_list<bus>& list, bus& object)
{
	int v1;
	cout << "Введите перед каким автобусом поставить: " << endl;
	cin >> v1;
	input(object);
	auto firstiter = list.begin();
	advance(firstiter, v1 - 1);
	list.insert_after(firstiter, object);
}
void press5(forward_list<bus>& list, forward_list<bus>& list1)
{
	string number;
	cout << "введите номер автобуса: " << endl;
	cin >> number;
	auto seconditers = list.begin();
	int j = 0;
	for (auto i = list.begin(); i != list.end(); i++)
	{
		if (number == i->num)
		{
			bus object1;
			object1.num = i->num;
			object1.surname = i->surname;
			object1.inicial = i->inicial;
			object1.marsh = i->marsh;
			list1.push_front(object1);
			if (j == 0)
			{
				list.pop_front();
				break;
			}
			advance(seconditers, j-1);
			list.erase_after(seconditers);
			break;
		}
		j++;
	}
}

void press6(forward_list<bus>& list, forward_list<bus>& list1) {
	string number;
	cout << "введите номер автобуса: " << endl;
	cin >> number;
	auto seconditers = list1.begin();
	int j = 0;
	for (auto i = list1.begin(); i != list1.end(); i++)
	{
		if (number == i->num)
		{
			bus object1;
			object1.num = i->num;
			object1.surname = i->surname;
			object1.inicial = i->inicial;
			object1.marsh = i->marsh;
			list.push_front(object1);
			if (j == 0)
			{
				list1.pop_front(); //удаление первого элемента
				break;
			}
			advance(seconditers, j - 1); //установка итератора на нужный индекс
			list1.erase_after(seconditers);
			break;
		}
		j++;
		
	}
}


int main()
{
	setlocale(LC_ALL, "ru");

	forward_list<bus>list;
	forward_list<bus>list1;
	bool proverka = true;
	bus object;
	do {
		int v;
		variant();
		cout << "сделайте выбор: " << endl;
		cin >> v;
		

		switch (v) {
		case 1:
			for (auto i = list.begin(); i != list.end(); i++) {
				cout << "номер автобуса: " << i->num;
				cout << "\t фамилия водителя: " << i->surname;
				cout << "\t инициалы водителя: " << i->inicial;
				cout << "\t номер маршрута: " << i->marsh << endl;
			}
			break;
		case 2:
			int size;
			cout << "введите кол-во автобусов: " << endl;
			cin >> size;
			for (int i = 0; i < size; i++) {
				input(object);
				list.push_front(object); // добавление в начало списка
				
			}
			break;
		case 3:
			press3(list, object);
			break;

		case 4:
			for (auto i = list.begin(); i != list.end(); i++) {
				cout << "автобусы находятся в парке: " << endl;
				cout << " номер автобуса: " << i->num;
				cout << "\t фамилия водителя: " << i->surname;
				cout << "\t инициалы водителя: " << i->inicial;
				cout << "\t номер маршрута: " << i->marsh << endl;
			}
			cout << "-------------------------------------------------------------------------------------------" << endl;
			for (auto i = list1.begin(); i != list1.end(); i++) {
				cout << "автобусы находятся на маршруте: " << endl;
				cout << " номер автобуса: " << i->num;
				cout << "\t фамилия водителя: " << i->surname;
				cout << "\t инициалы водителя: " << i->inicial;
				cout << "\t номер маршрута: " << i->marsh << endl;
			}
			break;
		case 5:
			press5(list, list1);
			break;
		case 6:
			press6(list,list1);
			break;

		case 0:
			proverka = false;
			break;
		}
	} while (proverka != false);


	return 0;
}
